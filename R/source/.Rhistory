mean(data$cost)
data$cost
# 데이터 정제 - 결측치 제거 및 outline 제거
plot(data$cost) # 0값 위 아래 있는 값들이 결측치임.
View(data)
View(data)
data
x <- data$cost
x
mean(x)
# 평균이 극단치에 영향을 받는 경우 - 중위수(median) 대체
median(x)
data <- subset(data, data$cost >= 2 & data$cost <= 10) # 결측치 제거 / 총점기준
data
x <- data$cost
x
mean(x)
# 평균이 극단치에 영향을 받는 경우 - 중위수(median) 대체
median(x)
# 데이터 정제 - 결측치 제거 및 outline 제거
plot(data$cost) # 0값 위 아래 있는 값들이 결측치임.
# 패키지를 이용한 비대칭도 나타내기
install.packages("moments")
library(moments)
cost <- ㅇㅁㅅㅁ$챈ㅅ
cost <- data$cost
# 왜도 - 평균 중심으로 기울어짐 정도
skewness(cost) #
# 첨도 - 표준정규분포와 비교하여 얼마나 뾰족한가 측정 지표
kurtosis(cost)
# 2) Hmisc 패키키 이용
install.packages("Hmisc")
library(Hmisc)
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data)
# 개별 변수 기술통계량
describe(data$gender)
# 개별 변수 기술통계량
describe(data$gender) # 특정 변수(명목) 기술통계량 - 비율 제공
describe(data$age) # 특정 변수(비율) 기술통계량 - lowest, highest
summary(data$age)
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data) # Hmisc 패키지에서 제공되는 함수
install.packages("prettyR")
library(prettyR)
library(prettyR)
freq(data)
# 개별 변수 대상
freq(data$gender)
# 거주지역 변수 리코딩
data$resident2[data$resident == 1] <- "특별시"
dasta$resident2[data$resident >= 2 & data$resident <= 4] <- "광역시"
data$resident2[data$resident >= 2 & data$resident <= 4] <- "광역시"
data$resident2[data$resident == 5] <- "시군구"
x<- table(data$resident2)
prop.table(x)
y <- prop.table(x)
round(y*100,2)
# 성별 변수 리코딩
data$gender2[data$gender ==1 ] <- "남자"
data$gender2[data$gender ==2 ] <- "여자"
x <- table(data$gender2)
prop.table(x)
prop.table(x) # 비율 계산 : 0 < x < 1
y <- prop.table(x)
round(y*100,2) # 백분율 적용(소수점 2자리)
# 나이변수 리코딩
data$age2[data$age <= 45 ] <- "중년층"
data$age2[data$age >=46 & data$age <= 59] <- "장년층"
data$age2[data$age >=60] <- "노년층"
x<- table(data$age2)
prop.table(x)
y<-prop.table(x)
round(y*100,2)
# 24.30  68.53   7.17
x <- table(data$level2)
# 학력수준
data$level2[data$level == 1] <- "고졸"
data$level2[data$level == 2] <- "대졸"
data$level2[data$level == 3] <- "대학원졸"
x <- table(data$level2)
prop.table(x)
y <- prop.table(x)
round(y*100,2)
# 학격여부 리코딩
data$pass2[data$pass == 1] <- "합격"
data$pass2[data$pass == 2] <- "실패"
y <- table(data$pass2)
x <- table(data$pass2)
prop.table(x)
prop.table(x) # 비율 계산 : 0 < x < 1
y <- prop.table(x)
round(y*100,2) # 백분율 적용(소수점 2자리)
head(data)
desc <- read.csv("../data/descriptive.csv", header = T)
View(desc)
View(desc)
View(desc)
View(desc)
table(data$gender) # 각 성별 빈도수 - outline 확인 -> 0, 5
table(data$gender) # 각 성별 빈도수 - outline 확인 -> 0, 5
# 개별 변수 기술통계량
describe(data$gender) # 특정 변수(명목) 기술통계량 - 비율 제공
# 개별 변수 기술통계량
describe(data$gender) # 특정 변수(명목) 기술통계량 - 비율 제공
describe(data$age) # 특정 변수(비율) 기술통계량 - lowest, highest
summary(data$age)
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data) # Hmisc 패키지에서 제공되는 함수
# 개별 변수 기술통계량
describe(data$gender) # 특정 변수(명목) 기술통계량 - 비율 제공
describe(data$age) # 특정 변수(비율) 기술통계량 - lowest, highest
summary(data$age)
freq(data) # 각 변수별 : 빈도, 결측치, 백분율, 특징 - 소수점 제공
# 개별 변수 대상
freq(data$gender) # 빈도와 비율 제공
desc
desc$type
type <- desc$type
summary(type)
x1 <- table(type)
x1
hist(type)
pie(x1)
age <- desc$age
age
hist(cost) # 히스토그램으로 왜도/첨도 확인
skewness(age)
kurtosis(age)
hist(age)
library(Hmisc)
describe(age)
library(prettyR)
freq(data)
# 조건 3)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(desc$age) +
+   stat_function(fun=dnorm, colour="blue", size=1) +
+   ggtitle("Normal Distribution")
View(desc)
View(desc)
ggplot(desc,aes(x=desc.index,y=age)) +
+   stat_function(fun=dnorm, colour="blue", size=1) +
+   ggtitle("Normal Distribution")
ggplot(desc,aes(y=age)) +
+   stat_function(fun=dnorm, colour="blue", size=1) +
+   ggtitle("Normal Distribution")
plot(density(age))
sd(age)
sort(age)
mean(age)
dnorms <- dnorm(age,mean(age),sd(age))
plot(age,dnorms)
plot(density(age))
plot(density(age))
mean(age) # 53.88
sd(age) # 6.813247
sort(age)
dnorms <- dnorm(age,mean(age),sd(age))
par(new=TRUE)
plot(age,dnorms)
hist(age)
par(new=TRUE)
plot(density(age))
mean(age) # 53.88
sd(age) # 6.813247
sort(age)
dnorms <- dnorm(age,mean(age),sd(age))
par(new=TRUE)
plot(age,dnorms)
install.packages("readxl")
library(readxl)
subway <- read_xlsx("../data/서울교통공사 지하철역 주소 및 전화번호 정보.xlsx")
head(subway)
install.packages("ggmap")
library(ggmap)
googleAPIkey = "AIzaSyBKRq7_4cl5CG-p7rpn4jAAsayRK4qoWYc"
# 서울의 위치 정보를 가져온 후 gg_seoul 변수에 할당
register_google(googleAPIkey)
gg_seoul <- get_googlemap("seoul", zoom = 7, maptype= "terrain")
ggmap(gg_seoul)
gg_seoul <- get_googlemap("seoul", zoom = 10, maptype= "terrain")
ggmap(gg_seoul)
library(dplyr)
library(ggplot2)
library(ggplot2)
library(dplyr)
geo_code <- enc2utf8(subway$도로명주소) %>% geocode()
View(mpg_comp_suv)
View(mpg_comp_suv)
View(subway)
subway <- read_xlsx("../data/서울_지하철_전화번호_주소_5호선.xlsx")
head(subway)
install.packages("ggmap")
install.packages("ggmap")
library(ggmap)
googleAPIkey = "AIzaSyBKRq7_4cl5CG-p7rpn4jAAsayRK4qoWYc"
register_google(googleAPIkey)
gg_seoul <- get_googlemap("seoul", zoom = 10, maptype= "terrain")
ggmap(gg_seoul)
ggmap(gg_seoul)
googleAPIkey = "AIzaSyBKRq7_4cl5CG-p7rpn4jAAsayRK4qoWYc"
register_google(googleAPIkey)
gg_seoul <- get_googlemap("seoul", zoom = 10, maptype= "terrain")
ggmap(gg_seoul)
library(dplyr)
library(ggplot2)
geo_code <- enc2utf8(subway$도로명주소) %>% geocode()
geo_data <- as.numeric(geo_code)
geo_data <- as.numeric(geo_code)
View(geo_code)
View(geo_code)
geo_data <- as.numeric(geo_code)
geo_data <- as.numeric(as.data.frame(geo_code))
View(geo_code)
View(geo_code)
geo_data <- as.numeric(geo_code)
geo_data <- as.numeric(geo_code)
geo_data <- as.numeric(geo_code)
geo_data <- as.numeric(lapply(geo_code))
geo_data <- as.numeric(sapply(geo_code))
geo_data <- lapply(geo_code,as.numeric)
View(geo_data)
View(geo_data)
View(geo_data)
View(geo_data)
geoPoint=geom_point(data = geo_code, aes(x=geo_code$lon, y=geo_code$lat))
View(geoPoint)
View(geoPoint)
subway$lon <- geo_data$lon
subway$lat <- geo_data$lat
subway$lon <- geo_data$lon
View(subway)
View(subway)
# 4. 아파트 실거래가 데이터 전처리
apart <- read_xlsx("../data/apartment.xlsx")
# 4. 아파트 실거래가 데이터 전처리
apart <- read_xlsx("../data/apartment.xlsx",skip=16)
View(apart)
View(apart)
View(apart)
View(apart)
apart$`전용면적(㎡)` <- round(apart$`전용면적(㎡)`,0)
apart$`전용면적(㎡)` <- round(as.numeric(apart$`전용면적(㎡)`),0)
aparts <- apart[apart$`전용면적(㎡)`==85,]
View(aparts)
View(aparts)
apart <- as.numeric(apart$`거래금액(만원)`)
# 4. 아파트 실거래가 데이터 전처리
apart <- read_xlsx("../data/apartment.xlsx",skip=16)
# 소수점에서 반올림
apart$`전용면적(㎡)` <- round(as.numeric(apart$`전용면적(㎡)`),0)
# 전용면적 85만 추출
aparts <- apart[apart$`전용면적(㎡)`== 85,]
apart$`거래금액(만원)` <- as.numeric(apart$`거래금액(만원)`)
# 4. 아파트 실거래가 데이터 전처리
apart <- read_xlsx("../data/apartment.xlsx",skip=16)
# 소수점에서 반올림
apart$`전용면적(㎡)` <- round(as.numeric(apart$`전용면적(㎡)`),0)
# 전용면적 85만 추출
aparts <- apart[apart$`전용면적(㎡)`== 85,]
apart$`거래금액(만원)` <- as.numeric(gsub(",","",apart$`거래금액(만원)`))
aparts$`거래금액(만원)` <- as.numeric(gsub(",","",aparts$`거래금액(만원)`))
library(dplyr)
library(dplyr)
# 단지별 평균 가격 추출
sector_value <- aparts %>%
group_by(aparts$단지명) %>%
summarise(mean_value = mean(aparts$`거래금액(만원)`))
View(sector_value)
View(sector_value)
# 단지별 평균 가격 추출
sector_value <- aparts %>%
group_by(단지명) %>%
summarise(mean_value = mean(거래금액(만원)))
# 단지별 평균 가격 추출
sector_value <- aparts %>%
group_by(단지명) %>%
summarise(mean_value = mean(aparts$`거래금액(만원)`))
View(sector_value)
View(sector_value)
# 단지별 평균 가격 추출
aparts %>%
group_by(단지명) %>%
mutate(mean_value = mean(`거래금액(만원)`))
# 단지별 평균 가격 추출
sector_value <- aparts %>%
group_by(단지명) %>%
mutate(mean_value = mean(`거래금액(만원)`))
View(sector_value)
View(sector_value)
# 단지별 평균 가격 추출
aparts <- aparts %>%
group_by(단지명) %>%
mutate(mean_value = mean(`거래금액(만원)`))
# 열끼리 합치기
aparts <- paste(aparts$시군구,aparts$번지,sep=" ")
# 4. 아파트 실거래가 데이터 전처리
apart <- read_xlsx("../data/apartment.xlsx",skip=16)
# 소수점에서 반올림
apart$`전용면적(㎡)` <- round(as.numeric(apart$`전용면적(㎡)`),0)
# 전용면적 85만 추출
aparts <- apart[apart$`전용면적(㎡)`== 85,]
# ","제거 및 수치형으로 변환.
aparts$`거래금액(만원)` <- as.numeric(gsub(",","",aparts$`거래금액(만원)`))
apart$`거래금액(만원)` <- as.numeric(gsub(",","",apart$`거래금액(만원)`))
library(dplyr)
# 단지별 평균 가격 추출
aparts <- aparts %>%
group_by(단지명) %>%
mutate(mean_value = mean(`거래금액(만원)`))
# 열끼리 합치기
aparts$결합주소 <- paste(aparts$시군구,aparts$번지,sep=" ")
# 위/경도 데이터 가져오기.
geo_code2 <- enc2utf8(aparts$결합주소) %>% geocode()
geo_data2 <- lapply(geo_code2,as.numeric)
aparts$lon <- geo_data2$lon
aparts$lat <- geo_data2$lat
# 5. 구글 지도에 지하쳘역과 아파트 가격 표시하기
# 5-1) 강서구 지도 가져오기
get_googlemap(center = geo_data, maptype = "roadmap", zoom=10) %>%
ggmap() +
geoPoint
# 5. 구글 지도에 지하쳘역과 아파트 가격 표시하기
# 5-1) 강서구 지도 가져오기
get_googlemap(center = geo_data2, maptype = "roadmap", zoom=10) %>%
ggmap() +
geoPoint
geoPoint2=geom_point(data = geo_code2, aes(x=geo_code2$lon, y=geo_code2$lat))
# 5. 구글 지도에 지하쳘역과 아파트 가격 표시하기
# 5-1) 강서구 지도 가져오기
get_googlemap(center = geo_data2, maptype = "roadmap", zoom=10) %>%
ggmap() +
geoPoint2
library(ggmap)
# 5. 구글 지도에 지하쳘역과 아파트 가격 표시하기
# 5-1) 강서구 지도 가져오기
get_googlemap(center = geo_data2, maptype = "roadmap", zoom=10) %>%
ggmap() +
geoPoint2
# 5. 구글 지도에 지하쳘역과 아파트 가격 표시하기
# 5-1) 강서구 지도 가져오기
geo_code3 <- enc2utf8("강서구") %>% geocode()
geo_data3 <- as.numeric(geo_code3)
geoPoint3=geom_point(data = geo_code3, aes(x=geo_code3$lon, y=geo_code3$lat))
get_googlemap(center = geo_data3, maptype = "roadmap", zoom=10) %>%
ggmap() +
geoPoint3
get_googlemap(center = geo_data3, maptype = "roadmap", zoom=13) %>%
ggmap() +
geoPoint3
get_googlemap(center = geo_data3, maptype = "roadmap", zoom=12) %>%
ggmap() +
geoPoint3
gmap <- get_googlemap(center = geo_data3, maptype = "roadmap", zoom=12) %>% ggmap() + geoPoint3
# 5-2)지하철역 위치 및 아파트 가격 정보 표시하기.
install.packages("leaflet")
library(leaflet)
content_sub <- paste(sep="<br/>",
paste0("<b>호선: </b>",subway$호선),
paste0("<b>역명: </b>",subway$역명),
paste0("<b>주소: </b>",subway$도로명주소),
paste0("<b>전화번호: </b>",subway$전화번호))
content_apart <- paste(sep="<br/>",
paste0("<b>단지명: </b>",aparts$단지명),
paste0("<b>주소: </b>",aparts$결합주소),
paste0("<b>전용면적: </b>",aparts$`전용면적(㎡)`),
paste0("<b>전화번호: </b>",aparts$`거래금액(만원)`),
paste0("<b>주소: </b>",aparts$층),
paste0("<b>주소: </b>",aparts$건축년도))
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub) %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_apart)
m
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub) #%>%
m
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub) %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_apart)
m
m<- leaflet() %>%
addTiles() %>%
#addMarkers(lng = subway$lon,
# lat = subway$lat,
# popup = content_sub) %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_apart)
m
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub) %>%
addMarkers(lng = aparts$lon,
lat = aparts$lat,
popup = content_apart)
m
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub,
clusterOptions = markerClusterOptions()) %>%
addMarkers(lng = aparts$lon,
lat = aparts$lat,
popup = content_apart,
clusterOptions = markerClusterOptions())
m
content_sub <- paste(sep="<br/>",
paste0("<b>호선: </b>",subway$호선),
paste0("<b>역명: </b>",subway$역명),
paste0("<b>주소: </b>",subway$도로명주소),
paste0("<b>전화번호: </b>",subway$전화번호))
content_apart <- paste(sep="<br/>",
paste0("<b>단지명: </b>",aparts$단지명),
paste0("<b>주소: </b>",aparts$결합주소),
paste0("<b>전용면적(㎡): </b>",aparts$`전용면적(㎡)`),
paste0("<b>거래금액(만원): </b>",aparts$`거래금액(만원)`),
paste0("<b>층: </b>",aparts$층),
paste0("<b>건축년도: </b>",aparts$건축년도))
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub,
clusterOptions = markerClusterOptions()) %>%
addMarkers(lng = aparts$lon,
lat = aparts$lat,
popup = content_apart,
clusterOptions = markerClusterOptions())
m
m<- leaflet() %>%
addTiles() %>%
addMarkers(lng = subway$lon,
lat = subway$lat,
popup = content_sub,
label = "지하철 5호선",
clusterOptions = markerClusterOptions()) %>%
addMarkers(lng = aparts$lon,
lat = aparts$lat,
popup = content_apart,
label = "아파트",
clusterOptions = markerClusterOptions())
m
View(subway)
View(subway)
View(subway)
View(subway)
subway <- read_xlsx("../data/서울_지하철_전화번호_주소_5호선.xlsx")
colnames(subway) = c("no","line","station","road","earth","post","phone")
library(ggmap)
googleAPIkey = "AIzaSyBKRq7_4cl5CG-p7rpn4jAAsayRK4qoWYc"
register_google(googleAPIkey)
gg_seoul <- get_googlemap("seoul", zoom = 10, maptype= "terrain")
ggmap(gg_seoul)
library(dplyr)
library(ggplot2)
geo_code <- enc2utf8(subway$road) %>% geocode()
geoPoint=geom_point(data = geo_code, aes(x=geo_code$lon, y=geo_code$lat))
# 3. subway에 lon / lat 열로 붙여넣기
subway$lon <- geo_data$lon
subway$lat <- geo_data$lat
# 4. 아파트 실거래가 데이터 전처리
apart <- read_xlsx("../data/apartment.xlsx",skip=16)
View(apart)
View(apart)
colnames(apart) = c("city","bunge","bone","subno","danji","square","conyear","conday","price","floor","madeyear","road")
head(apart)
# 소수점에서 반올림
apart$square <- round(as.numeric(apart$square),0)
head(apart$square)
# 전용면적 85만 추출
aparts <- apart[apart$square== 85,]
head(aparts)
# ","제거 및 수치형으로 변환.
aparts$price <- as.numeric(gsub(",","",aparts$price))
head(aparts$price)
apart$price <- as.numeric(gsub(",","",apart$price))
head(aparts$price)
library(dplyr)
View(aparts)
View(aparts)
library(dplyr)
# 단지별 평균 가격 추출
aparts <- aparts %>%
group_by(danji) %>%
mutate(mean_value = mean(price))
# 열끼리 합치기
aparts$combiaddr <- paste(aparts$city, aparts$bunge,sep=" ")
# 위/경도 데이터 가져오기.
geo_code2 <- enc2utf8(aparts$combiaddr) %>% geocode()
geo_data2 <- lapply(geo_code2,as.numeric)
geoPoint2=geom_point(data = geo_code2, aes(x=geo_code2$lon, y=geo_code2$lat))
aparts$lon <- geo_data2$lon
aparts$lat <- geo_data2$lat
